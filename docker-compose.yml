# ============================================
# CRM PostgreSQL System - Docker Compose Configuration
# Modern format without version (Docker Compose v2+)
# ============================================

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crm_db}
      POSTGRES_USER: ${POSTGRES_USER:-crm_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crm_password_secure_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-4002}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crm_user} -d ${POSTGRES_DB:-crm_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API Server
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: crm-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-4001}:4001"
    env_file:
      - ./backend/.env
    environment:
      # Override specific values for Docker environment
      DB_HOST: postgres
      DB_PORT: 5432
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Web Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: crm-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-4000}:80"
    env_file:
      - ./frontend/.env
    environment:
      # Override API URL for Docker environment
      VITE_API_URL: http://localhost:4001/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Administration (Optional)
  adminer:
    image: adminer:4.8.1
    container_name: crm-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-4003}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: galkaev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crm-network
    profiles:
      - admin
      - full

volumes:
  postgres_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-crm-postgres}_postgres_data

networks:
  crm-network:
    driver: bridge
    name: ${NETWORK_NAME:-crm_network}