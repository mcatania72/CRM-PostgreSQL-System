version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: crm_db
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: crm_password_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "4002:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d crm_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API Server
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: crm-backend
    restart: unless-stopped
    ports:
      - "4001:4001"
    environment:
      NODE_ENV: production
      PORT: 4001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: crm_db
      DB_USER: crm_user
      DB_PASSWORD: crm_password_secure_2024
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Web Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crm-frontend
    restart: unless-stopped
    ports:
      - "4000:80"
    environment:
      REACT_APP_API_URL: http://localhost:4001/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
    name: crm_postgres_data

networks:
  crm-network:
    driver: bridge
    name: crm-network